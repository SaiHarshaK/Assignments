Printing analysis 'Scalar Evolution Analysis' for function '_Z6isSafeiPA4_bPii':
Classifying expressions for: @_Z6isSafeiPA4_bPii
  %.01 = phi i32 [ 0, %4 ], [ %22, %21 ]
  -->  {0,+,1}<nuw><nsw><%5> U: [0,5) S: [0,5)		Exits: <<Unknown>>		LoopDispositions: { %5: Computable }
  %8 = sext i32 %0 to i64
  -->  (sext i32 %0 to i64) U: [-2147483648,2147483648) S: [-2147483648,2147483648)		Exits: (sext i32 %0 to i64)		LoopDispositions: { %5: Invariant }
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 %8
  -->  ((4 * (sext i32 %0 to i64))<nsw> + %1)<nsw> U: full-set S: full-set		Exits: ((4 * (sext i32 %0 to i64))<nsw> + %1)<nsw>		LoopDispositions: { %5: Invariant }
  %10 = sext i32 %.01 to i64
  -->  {0,+,1}<nuw><nsw><%5> U: [0,5) S: [0,5)		Exits: <<Unknown>>		LoopDispositions: { %5: Computable }
  %11 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %10
  -->  {((4 * (sext i32 %0 to i64))<nsw> + %1)<nsw>,+,1}<nw><%5> U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %5: Computable }
  %12 = load i8, i8* %11, align 1
  -->  %12 U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %5: Variant }
  %13 = trunc i8 %12 to i1
  -->  (trunc i8 %12 to i1) U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %5: Variant }
  %15 = sext i32 %.01 to i64
  -->  {0,+,1}<nuw><nsw><%5> U: [0,5) S: [0,5)		Exits: <<Unknown>>		LoopDispositions: { %5: Computable }
  %16 = getelementptr inbounds i32, i32* %2, i64 %15
  -->  {%2,+,4}<nsw><%5> U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %5: Computable }
  %17 = load i32, i32* %16, align 4
  -->  %17 U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %5: Variant }
  %22 = add nsw i32 %.01, 1
  -->  {1,+,1}<nuw><nsw><%5> U: [1,6) S: [1,6)		Exits: <<Unknown>>		LoopDispositions: { %5: Computable }
  %.0 = phi i1 [ false, %19 ], [ true, %23 ]
  -->  %.0 U: full-set S: full-set
Determining loop execution counts for: @_Z6isSafeiPA4_bPii
Loop %5: <multiple exits> Unpredictable backedge-taken count.
  exit count for : 4
  exit count for : ***COULDNOTCOMPUTE***
Loop %5: max backedge-taken count is 4
Loop %5: Unpredictable predicated backedge-taken count. 
Printing analysis 'Scalar Evolution Analysis' for function '_Z17graphColoringUtilPA4_biPii':
Classifying expressions for: @_Z17graphColoringUtilPA4_biPii
  %.01 = phi i32 [ 1, %7 ], [ %25, %24 ]
  -->  {1,+,1}<nuw><nsw><%8> U: [1,-2147483648) S: [1,-2147483648)		Exits: <<Unknown>>		LoopDispositions: { %8: Computable }
  %11 = call zeroext i1 @_Z6isSafeiPA4_bPii(i32 %3, [4 x i8]* %0, i32* %2, i32 %.01)
  -->  %11 U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %8: Variant }
  %13 = sext i32 %3 to i64
  -->  (sext i32 %3 to i64) U: [-2147483648,2147483648) S: [-2147483648,2147483648)		Exits: (sext i32 %3 to i64)		LoopDispositions: { %8: Invariant }
  %14 = getelementptr inbounds i32, i32* %2, i64 %13
  -->  ((4 * (sext i32 %3 to i64))<nsw> + %2)<nsw> U: full-set S: full-set		Exits: ((4 * (sext i32 %3 to i64))<nsw> + %2)<nsw>		LoopDispositions: { %8: Invariant }
  %15 = add nsw i32 %3, 1
  -->  (1 + %3) U: full-set S: full-set		Exits: (1 + %3)		LoopDispositions: { %8: Invariant }
  %16 = call zeroext i1 @_Z17graphColoringUtilPA4_biPii([4 x i8]* %0, i32 %1, i32* %2, i32 %15)
  -->  %16 U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %8: Variant }
  %17 = zext i1 %16 to i32
  -->  (zext i1 %16 to i32) U: [0,2) S: [0,2)		Exits: <<Unknown>>		LoopDispositions: { %8: Variant }
  %21 = sext i32 %3 to i64
  -->  (sext i32 %3 to i64) U: [-2147483648,2147483648) S: [-2147483648,2147483648)		Exits: (sext i32 %3 to i64)		LoopDispositions: { %8: Invariant }
  %22 = getelementptr inbounds i32, i32* %2, i64 %21
  -->  ((4 * (sext i32 %3 to i64))<nsw> + %2)<nsw> U: full-set S: full-set		Exits: ((4 * (sext i32 %3 to i64))<nsw> + %2)<nsw>		LoopDispositions: { %8: Invariant }
  %25 = add nsw i32 %.01, 1
  -->  {2,+,1}<nuw><%8> U: [2,-2147483646) S: [2,-2147483646)		Exits: <<Unknown>>		LoopDispositions: { %8: Computable }
  %.0 = phi i1 [ true, %6 ], [ true, %19 ], [ false, %26 ]
  -->  %.0 U: full-set S: full-set
Determining loop execution counts for: @_Z17graphColoringUtilPA4_biPii
Loop %8: <multiple exits> Unpredictable backedge-taken count.
  exit count for : (0 smax %1)
  exit count for : ***COULDNOTCOMPUTE***
Loop %8: max backedge-taken count is 2147483647
Loop %8: Unpredictable predicated backedge-taken count. 
Printing analysis 'Scalar Evolution Analysis' for function '_Z13graphColoringPA4_bi':
Classifying expressions for: @_Z13graphColoringPA4_bi
  %3 = alloca [4 x i32], align 16
  -->  %3 U: [0,-15) S: [-9223372036854775808,9223372036854775793)
  %.01 = phi i32 [ 0, %2 ], [ %10, %9 ]
  -->  {0,+,1}<nuw><nsw><%4> U: [0,5) S: [0,5)		Exits: 4		LoopDispositions: { %4: Computable }
  %7 = sext i32 %.01 to i64
  -->  {0,+,1}<nuw><nsw><%4> U: [0,5) S: [0,5)		Exits: 4		LoopDispositions: { %4: Computable }
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %7
  -->  {%3,+,4}<nsw><%4> U: [0,-3) S: [-9223372036854775808,9223372036854775805)		Exits: (16 + %3)		LoopDispositions: { %4: Computable }
  %10 = add nsw i32 %.01, 1
  -->  {1,+,1}<nuw><nsw><%4> U: [1,6) S: [1,6)		Exits: 5		LoopDispositions: { %4: Computable }
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i32 0, i32 0
  -->  %3 U: [0,-15) S: [-9223372036854775808,9223372036854775793)
  %13 = call zeroext i1 @_Z17graphColoringUtilPA4_biPii([4 x i8]* %0, i32 %1, i32* %12, i32 0)
  -->  %13 U: full-set S: full-set
  %14 = zext i1 %13 to i32
  -->  (zext i1 %13 to i32) U: [0,2) S: [0,2)
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
  -->  %17 U: full-set S: full-set
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i32 0, i32 0
  -->  %3 U: [0,-15) S: [-9223372036854775808,9223372036854775793)
  %.0 = phi i1 [ false, %16 ], [ true, %18 ]
  -->  %.0 U: full-set S: full-set
Determining loop execution counts for: @_Z13graphColoringPA4_bi
Loop %4: backedge-taken count is 4
Loop %4: max backedge-taken count is 4
Loop %4: Predicated backedge-taken count is 4
 Predicates:

Loop %4: Trip multiple is 5
Printing analysis 'Scalar Evolution Analysis' for function '_Z13printSolutionPi':
Classifying expressions for: @_Z13printSolutionPi
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i32 0, i32 0))
  -->  %2 U: full-set S: full-set
  %.0 = phi i32 [ 0, %1 ], [ %11, %10 ]
  -->  {0,+,1}<nuw><nsw><%3> U: [0,5) S: [0,5)		Exits: 4		LoopDispositions: { %3: Computable }
  %6 = sext i32 %.0 to i64
  -->  {0,+,1}<nuw><nsw><%3> U: [0,5) S: [0,5)		Exits: 4		LoopDispositions: { %3: Computable }
  %7 = getelementptr inbounds i32, i32* %0, i64 %6
  -->  {%0,+,4}<nsw><%3> U: full-set S: full-set		Exits: (16 + %0)		LoopDispositions: { %3: Computable }
  %8 = load i32, i32* %7, align 4
  -->  %8 U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %3: Variant }
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %8)
  -->  %9 U: full-set S: full-set		Exits: <<Unknown>>		LoopDispositions: { %3: Variant }
  %11 = add nsw i32 %.0, 1
  -->  {1,+,1}<nuw><nsw><%3> U: [1,6) S: [1,6)		Exits: 5		LoopDispositions: { %3: Computable }
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  -->  %13 U: full-set S: full-set
Determining loop execution counts for: @_Z13printSolutionPi
Loop %3: backedge-taken count is 4
Loop %3: max backedge-taken count is 4
Loop %3: Predicated backedge-taken count is 4
 Predicates:

Loop %3: Trip multiple is 5
Printing analysis 'Scalar Evolution Analysis' for function 'main':
Classifying expressions for: @main
  %1 = alloca [4 x [4 x i8]], align 16
  -->  %1 U: [0,-15) S: [-9223372036854775808,9223372036854775793)
  %2 = bitcast [4 x [4 x i8]]* %1 to i8*
  -->  %1 U: [0,-15) S: [-9223372036854775808,9223372036854775793)
  %3 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %1, i32 0, i32 0
  -->  %1 U: [0,-15) S: [-9223372036854775808,9223372036854775793)
  %4 = call zeroext i1 @_Z13graphColoringPA4_bi([4 x i8]* %3, i32 3)
  -->  %4 U: full-set S: full-set
Determining loop execution counts for: @main
